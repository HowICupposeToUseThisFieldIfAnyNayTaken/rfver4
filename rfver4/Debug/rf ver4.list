
rf ver4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a0  080011a0  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  080011a0  080011a0  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a0  080011a0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a0  080011a0  000111a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011a4  080011a4  000111a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080011a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000004c  080011f4  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  080011f4  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002515  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000a22  00000000  00000000  000225cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00022ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000189  00000000  00000000  00023218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010878  00000000  00000000  000233a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002fb6  00000000  00000000  00033c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000554c7  00000000  00000000  00036bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000006cc  00000000  00000000  0008c098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0008c764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001008 	.word	0x08001008

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	08001008 	.word	0x08001008

0800014c <dma_tx_reinit>:
		UART2_RX_CHANEL->CNDTR = rx_volume;//количество передач
		//UART2_RX_CHANEL->CCR |= DMA_CCR_EN;//запуск
		break;
	}
}
void dma_tx_reinit(uint8_t uart_num,uint16_t tx_volume, char *tx_pointer){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	603a      	str	r2, [r7, #0]
 8000156:	71fb      	strb	r3, [r7, #7]
 8000158:	460b      	mov	r3, r1
 800015a:	80bb      	strh	r3, [r7, #4]
	switch (uart_num){
 800015c:	79fb      	ldrb	r3, [r7, #7]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d002      	beq.n	8000168 <dma_tx_reinit+0x1c>
 8000162:	2b02      	cmp	r3, #2
 8000164:	d007      	beq.n	8000176 <dma_tx_reinit+0x2a>
		UART2_TX_CHANEL->CMAR = (uint32_t)tx_pointer;//вносим адрес массива куда писать значения
		UART2_TX_CHANEL->CNDTR = tx_volume;//количество передач
		//UART2_TX_CHANEL->CCR |= DMA_CCR_EN;//запуск
		break;
	}
}
 8000166:	e00d      	b.n	8000184 <dma_tx_reinit+0x38>
		UART1_TX_CHANEL->CMAR = (uint32_t)tx_pointer;//вносим адрес массива куда писать значения
 8000168:	4a09      	ldr	r2, [pc, #36]	; (8000190 <dma_tx_reinit+0x44>)
 800016a:	683b      	ldr	r3, [r7, #0]
 800016c:	60d3      	str	r3, [r2, #12]
		UART1_TX_CHANEL->CNDTR = tx_volume;//количество передач
 800016e:	4a08      	ldr	r2, [pc, #32]	; (8000190 <dma_tx_reinit+0x44>)
 8000170:	88bb      	ldrh	r3, [r7, #4]
 8000172:	6053      	str	r3, [r2, #4]
		break;
 8000174:	e006      	b.n	8000184 <dma_tx_reinit+0x38>
		UART2_TX_CHANEL->CMAR = (uint32_t)tx_pointer;//вносим адрес массива куда писать значения
 8000176:	4a07      	ldr	r2, [pc, #28]	; (8000194 <dma_tx_reinit+0x48>)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	60d3      	str	r3, [r2, #12]
		UART2_TX_CHANEL->CNDTR = tx_volume;//количество передач
 800017c:	4a05      	ldr	r2, [pc, #20]	; (8000194 <dma_tx_reinit+0x48>)
 800017e:	88bb      	ldrh	r3, [r7, #4]
 8000180:	6053      	str	r3, [r2, #4]
		break;
 8000182:	bf00      	nop
}
 8000184:	bf00      	nop
 8000186:	370c      	adds	r7, #12
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	40020044 	.word	0x40020044
 8000194:	40020080 	.word	0x40020080

08000198 <dma_init>:

int16_t dma_init(uint8_t uart_num, uint16_t tx_volume, \
		uint8_t *tx_pointer, uint16_t rx_volume, uint8_t *rx_pointer){
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	60ba      	str	r2, [r7, #8]
 80001a0:	461a      	mov	r2, r3
 80001a2:	4603      	mov	r3, r0
 80001a4:	73fb      	strb	r3, [r7, #15]
 80001a6:	460b      	mov	r3, r1
 80001a8:	81bb      	strh	r3, [r7, #12]
 80001aa:	4613      	mov	r3, r2
 80001ac:	80fb      	strh	r3, [r7, #6]
	RCC->AHBENR |= RCC_AHBENR_DMA1EN;//включаем  тактирование DMA
 80001ae:	4b32      	ldr	r3, [pc, #200]	; (8000278 <dma_init+0xe0>)
 80001b0:	695b      	ldr	r3, [r3, #20]
 80001b2:	4a31      	ldr	r2, [pc, #196]	; (8000278 <dma_init+0xe0>)
 80001b4:	f043 0301 	orr.w	r3, r3, #1
 80001b8:	6153      	str	r3, [r2, #20]
	if(!(tx_pointer && rx_pointer) )
 80001ba:	68bb      	ldr	r3, [r7, #8]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d002      	beq.n	80001c6 <dma_init+0x2e>
 80001c0:	69bb      	ldr	r3, [r7, #24]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d102      	bne.n	80001cc <dma_init+0x34>
			return ERROR_WRONG_ADDRESS;
 80001c6:	f04f 33ff 	mov.w	r3, #4294967295
 80001ca:	e050      	b.n	800026e <dma_init+0xd6>
	switch (uart_num){
 80001cc:	7bfb      	ldrb	r3, [r7, #15]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d002      	beq.n	80001d8 <dma_init+0x40>
 80001d2:	2b02      	cmp	r3, #2
 80001d4:	d025      	beq.n	8000222 <dma_init+0x8a>
 80001d6:	e049      	b.n	800026c <dma_init+0xd4>
	case UART1_NUMBER://**********uart1**********//
		//из UART в память
		//канал 5 работает на прием UART1
		UART1_RX_CHANEL->CPAR = (uint32_t)&(USART1->DR);//адрес перифирии UART1
 80001d8:	4b28      	ldr	r3, [pc, #160]	; (800027c <dma_init+0xe4>)
 80001da:	4a29      	ldr	r2, [pc, #164]	; (8000280 <dma_init+0xe8>)
 80001dc:	609a      	str	r2, [r3, #8]
		UART1_RX_CHANEL->CMAR = (uint32_t)rx_pointer;//вносим адрес массива куда писать значения
 80001de:	4a27      	ldr	r2, [pc, #156]	; (800027c <dma_init+0xe4>)
 80001e0:	69bb      	ldr	r3, [r7, #24]
 80001e2:	60d3      	str	r3, [r2, #12]
		UART1_RX_CHANEL->CNDTR = rx_volume;//количество передач
 80001e4:	4a25      	ldr	r2, [pc, #148]	; (800027c <dma_init+0xe4>)
 80001e6:	88fb      	ldrh	r3, [r7, #6]
 80001e8:	6053      	str	r3, [r2, #4]
		//из перифирии 8бит в память 8бит низкий приоритет
		//адрес памяти инкрементируется, адрес перифирии нет, не цикличный мод
		UART1_RX_CHANEL->CCR =  DMA_CCR_MINC;// | DMA_CCR_CIRC;
 80001ea:	4b24      	ldr	r3, [pc, #144]	; (800027c <dma_init+0xe4>)
 80001ec:	2280      	movs	r2, #128	; 0x80
 80001ee:	601a      	str	r2, [r3, #0]
		UART1_RX_CHANEL->CCR |= DMA_CCR_TEIE | DMA_CCR_TCIE;//прерывания по ошибке транзакции и по окончанию
 80001f0:	4b22      	ldr	r3, [pc, #136]	; (800027c <dma_init+0xe4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a21      	ldr	r2, [pc, #132]	; (800027c <dma_init+0xe4>)
 80001f6:	f043 030a 	orr.w	r3, r3, #10
 80001fa:	6013      	str	r3, [r2, #0]
		//UART_RX_CHANEL->CCR |= DMA_CCR_EN;//запуск
		//канал 4 работает на передачу UART1
		UART1_TX_CHANEL->CPAR = (uint32_t)&(USART1->DR);//адрес перифирии UART1
 80001fc:	4b21      	ldr	r3, [pc, #132]	; (8000284 <dma_init+0xec>)
 80001fe:	4a20      	ldr	r2, [pc, #128]	; (8000280 <dma_init+0xe8>)
 8000200:	609a      	str	r2, [r3, #8]
		UART1_TX_CHANEL->CMAR = (uint32_t)tx_pointer;//вносим адрес массива откуда брать значения
 8000202:	4a20      	ldr	r2, [pc, #128]	; (8000284 <dma_init+0xec>)
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	60d3      	str	r3, [r2, #12]
		UART1_TX_CHANEL->CNDTR = tx_volume;//количество передач
 8000208:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <dma_init+0xec>)
 800020a:	89bb      	ldrh	r3, [r7, #12]
 800020c:	6053      	str	r3, [r2, #4]
		//из памяти 8бит в перифирию 8бит низкий приоритет
		//адрес памяти инкрементируется, адрес перифирии нет, не цикличный мод
		UART1_TX_CHANEL->CCR =  DMA_CCR_MINC | DMA_CCR_DIR;// | DMA_CCR_CIRC;
 800020e:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <dma_init+0xec>)
 8000210:	2290      	movs	r2, #144	; 0x90
 8000212:	601a      	str	r2, [r3, #0]
		UART1_TX_CHANEL->CCR |= DMA_CCR_TEIE | DMA_CCR_TCIE;//прерывания по ошибке транзакции и по окончанию
 8000214:	4b1b      	ldr	r3, [pc, #108]	; (8000284 <dma_init+0xec>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <dma_init+0xec>)
 800021a:	f043 030a 	orr.w	r3, r3, #10
 800021e:	6013      	str	r3, [r2, #0]
		//UART_TX_CHANEL->CCR |= DMA_CCR_EN;//запуск
		break;
 8000220:	e024      	b.n	800026c <dma_init+0xd4>
	case UART2_NUMBER://**********uart2**********//
		//из UART в память
		//канал 6 работает на прием UART2
		UART2_RX_CHANEL->CPAR = (uint32_t)&(USART2->DR);//адрес перифирии UART1
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <dma_init+0xf0>)
 8000224:	4a19      	ldr	r2, [pc, #100]	; (800028c <dma_init+0xf4>)
 8000226:	609a      	str	r2, [r3, #8]
		UART2_RX_CHANEL->CMAR = (uint32_t)rx_pointer;//вносим адрес массива куда писать значения
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <dma_init+0xf0>)
 800022a:	69bb      	ldr	r3, [r7, #24]
 800022c:	60d3      	str	r3, [r2, #12]
		UART2_RX_CHANEL->CNDTR = rx_volume;//количество передач
 800022e:	4a16      	ldr	r2, [pc, #88]	; (8000288 <dma_init+0xf0>)
 8000230:	88fb      	ldrh	r3, [r7, #6]
 8000232:	6053      	str	r3, [r2, #4]
		//из перифирии 8бит в память 8бит низкий приоритет
		//адрес памяти инкрементируется, адрес перифирии нет, не цикличный мод
		UART2_RX_CHANEL->CCR =  DMA_CCR_MINC;// | DMA_CCR_CIRC;
 8000234:	4b14      	ldr	r3, [pc, #80]	; (8000288 <dma_init+0xf0>)
 8000236:	2280      	movs	r2, #128	; 0x80
 8000238:	601a      	str	r2, [r3, #0]
		UART2_RX_CHANEL->CCR |= DMA_CCR_TEIE | DMA_CCR_TCIE;//прерывания по ошибке транзакции и по окончанию
 800023a:	4b13      	ldr	r3, [pc, #76]	; (8000288 <dma_init+0xf0>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a12      	ldr	r2, [pc, #72]	; (8000288 <dma_init+0xf0>)
 8000240:	f043 030a 	orr.w	r3, r3, #10
 8000244:	6013      	str	r3, [r2, #0]
		//UART2_RX_CHANEL->CCR |= DMA_CCR_EN;//запуск
		//канал 7 работает на передачу UART1
		UART2_TX_CHANEL->CPAR = (uint32_t)&(USART2->DR);//адрес перифирии UART1
 8000246:	4b12      	ldr	r3, [pc, #72]	; (8000290 <dma_init+0xf8>)
 8000248:	4a10      	ldr	r2, [pc, #64]	; (800028c <dma_init+0xf4>)
 800024a:	609a      	str	r2, [r3, #8]
		UART2_TX_CHANEL->CMAR = (uint32_t)tx_pointer;//вносим адрес массива откуда брать значения
 800024c:	4a10      	ldr	r2, [pc, #64]	; (8000290 <dma_init+0xf8>)
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	60d3      	str	r3, [r2, #12]
		UART2_TX_CHANEL->CNDTR = tx_volume;//количество передач
 8000252:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <dma_init+0xf8>)
 8000254:	89bb      	ldrh	r3, [r7, #12]
 8000256:	6053      	str	r3, [r2, #4]
		//из памяти 8бит в перифирию 8бит низкий приоритет
		//адрес памяти инкрементируется, адрес перифирии нет, не цикличный мод
		UART2_TX_CHANEL->CCR =  DMA_CCR_MINC | DMA_CCR_DIR;// | DMA_CCR_CIRC;
 8000258:	4b0d      	ldr	r3, [pc, #52]	; (8000290 <dma_init+0xf8>)
 800025a:	2290      	movs	r2, #144	; 0x90
 800025c:	601a      	str	r2, [r3, #0]
		UART2_TX_CHANEL->CCR |= DMA_CCR_TEIE | DMA_CCR_TCIE;//прерывания по ошибке транзакции и по окончанию
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <dma_init+0xf8>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a0b      	ldr	r2, [pc, #44]	; (8000290 <dma_init+0xf8>)
 8000264:	f043 030a 	orr.w	r3, r3, #10
 8000268:	6013      	str	r3, [r2, #0]
		//UART2_TX_CHANEL->CCR |= DMA_CCR_EN;//запуск
		break;
 800026a:	bf00      	nop
	}
	return 0;
 800026c:	2300      	movs	r3, #0
}
 800026e:	4618      	mov	r0, r3
 8000270:	3714      	adds	r7, #20
 8000272:	46bd      	mov	sp, r7
 8000274:	bc80      	pop	{r7}
 8000276:	4770      	bx	lr
 8000278:	40021000 	.word	0x40021000
 800027c:	40020058 	.word	0x40020058
 8000280:	40013804 	.word	0x40013804
 8000284:	40020044 	.word	0x40020044
 8000288:	4002006c 	.word	0x4002006c
 800028c:	40004404 	.word	0x40004404
 8000290:	40020080 	.word	0x40020080

08000294 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(){///tx
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF4){//прерывание по окочанию передачи
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <DMA1_Channel4_IRQHandler+0x40>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d008      	beq.n	80002b6 <DMA1_Channel4_IRQHandler+0x22>
		global_uart_flag_data_transmitted = 1;
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <DMA1_Channel4_IRQHandler+0x44>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	701a      	strb	r2, [r3, #0]
		DMA1_TX_DISABLE();
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <DMA1_Channel4_IRQHandler+0x48>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <DMA1_Channel4_IRQHandler+0x48>)
 80002b0:	f023 0301 	bic.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]
	}
	if(DMA1->ISR & DMA_ISR_TEIF4){//прерывание при ошибке передачи
 80002b6:	4b07      	ldr	r3, [pc, #28]	; (80002d4 <DMA1_Channel4_IRQHandler+0x40>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d000      	beq.n	80002c4 <DMA1_Channel4_IRQHandler+0x30>
		asm("nop");
 80002c2:	bf00      	nop
	}
	DMA1->IFCR = DMA_IFCR_CGIF4  | DMA_IFCR_CHTIF4 | DMA_IFCR_CTCIF4 | DMA_IFCR_CTEIF4;
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <DMA1_Channel4_IRQHandler+0x40>)
 80002c6:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 80002ca:	605a      	str	r2, [r3, #4]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	40020000 	.word	0x40020000
 80002d8:	20000075 	.word	0x20000075
 80002dc:	40020044 	.word	0x40020044

080002e0 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(){///rx
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF5){//прерывание по окочанию приема
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <DMA1_Channel5_IRQHandler+0x6c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d01e      	beq.n	800032e <DMA1_Channel5_IRQHandler+0x4e>
		DMA1_RX_DISABLE();
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <DMA1_Channel5_IRQHandler+0x70>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <DMA1_Channel5_IRQHandler+0x70>)
 80002f6:	f023 0301 	bic.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
		global_uart2_rx_time = global_relative_time;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <DMA1_Channel5_IRQHandler+0x74>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	461a      	mov	r2, r3
 8000302:	4b15      	ldr	r3, [pc, #84]	; (8000358 <DMA1_Channel5_IRQHandler+0x78>)
 8000304:	601a      	str	r2, [r3, #0]
		global_uart_flag_data_recieved = 1;
 8000306:	4b15      	ldr	r3, [pc, #84]	; (800035c <DMA1_Channel5_IRQHandler+0x7c>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
		global_uart_rx_iterator = UART_RX_BUFF_SIZE - UART1_RX_CHANEL->CNDTR;//буфер минус переданные байты
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <DMA1_Channel5_IRQHandler+0x70>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	b29b      	uxth	r3, r3
 8000312:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000316:	b29b      	uxth	r3, r3
 8000318:	b21a      	sxth	r2, r3
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <DMA1_Channel5_IRQHandler+0x80>)
 800031c:	801a      	strh	r2, [r3, #0]
		global_uart_rx_data[global_uart_rx_iterator] = '\0';
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <DMA1_Channel5_IRQHandler+0x84>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <DMA1_Channel5_IRQHandler+0x80>)
 8000324:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000328:	4413      	add	r3, r2
 800032a:	2200      	movs	r2, #0
 800032c:	701a      	strb	r2, [r3, #0]
	}
	if(DMA1->ISR & DMA_ISR_TEIF5){
 800032e:	4b07      	ldr	r3, [pc, #28]	; (800034c <DMA1_Channel5_IRQHandler+0x6c>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000336:	2b00      	cmp	r3, #0
 8000338:	d000      	beq.n	800033c <DMA1_Channel5_IRQHandler+0x5c>
			asm("nop");
 800033a:	bf00      	nop
		}
	DMA1->IFCR = DMA_IFCR_CGIF5  | DMA_IFCR_CHTIF5 | DMA_IFCR_CTCIF5 | DMA_IFCR_CTEIF5;
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <DMA1_Channel5_IRQHandler+0x6c>)
 800033e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000342:	605a      	str	r2, [r3, #4]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	40020000 	.word	0x40020000
 8000350:	40020058 	.word	0x40020058
 8000354:	20000068 	.word	0x20000068
 8000358:	20000044 	.word	0x20000044
 800035c:	20000074 	.word	0x20000074
 8000360:	20000040 	.word	0x20000040
 8000364:	20000070 	.word	0x20000070

08000368 <DMA1_Channel6_IRQHandler>:


void DMA1_Channel6_IRQHandler(){///rx
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF6){//прерывание по окочанию приема
 800036c:	4b19      	ldr	r3, [pc, #100]	; (80003d4 <DMA1_Channel6_IRQHandler+0x6c>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000374:	2b00      	cmp	r3, #0
 8000376:	d01e      	beq.n	80003b6 <DMA1_Channel6_IRQHandler+0x4e>
		DMA1_RX2_DISABLE();
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <DMA1_Channel6_IRQHandler+0x70>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4a16      	ldr	r2, [pc, #88]	; (80003d8 <DMA1_Channel6_IRQHandler+0x70>)
 800037e:	f023 0301 	bic.w	r3, r3, #1
 8000382:	6013      	str	r3, [r2, #0]
		global_uart2_flag_data_recieved = 1;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <DMA1_Channel6_IRQHandler+0x74>)
 8000386:	2201      	movs	r2, #1
 8000388:	701a      	strb	r2, [r3, #0]
		global_uart2_rx_iterator = UART_RX_BUFF_SIZE - UART2_RX_CHANEL->CNDTR;//буфер минус переданные байты
 800038a:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <DMA1_Channel6_IRQHandler+0x70>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	b29b      	uxth	r3, r3
 8000390:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000394:	b29b      	uxth	r3, r3
 8000396:	b21a      	sxth	r2, r3
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <DMA1_Channel6_IRQHandler+0x78>)
 800039a:	801a      	strh	r2, [r3, #0]
		global_uart2_rx_data[global_uart2_rx_iterator] = '\0';
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <DMA1_Channel6_IRQHandler+0x7c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0f      	ldr	r2, [pc, #60]	; (80003e0 <DMA1_Channel6_IRQHandler+0x78>)
 80003a2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80003a6:	4413      	add	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	701a      	strb	r2, [r3, #0]
		global_uart2_rx_time = global_relative_time;
 80003ac:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <DMA1_Channel6_IRQHandler+0x80>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	461a      	mov	r2, r3
 80003b2:	4b0e      	ldr	r3, [pc, #56]	; (80003ec <DMA1_Channel6_IRQHandler+0x84>)
 80003b4:	601a      	str	r2, [r3, #0]
	}
	if(DMA1->ISR & DMA_ISR_TEIF6){
 80003b6:	4b07      	ldr	r3, [pc, #28]	; (80003d4 <DMA1_Channel6_IRQHandler+0x6c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d000      	beq.n	80003c4 <DMA1_Channel6_IRQHandler+0x5c>
			asm("nop");
 80003c2:	bf00      	nop
		}
	DMA1->IFCR = DMA_IFCR_CGIF6  | DMA_IFCR_CHTIF6 | DMA_IFCR_CTCIF6 | DMA_IFCR_CTEIF6;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <DMA1_Channel6_IRQHandler+0x6c>)
 80003c6:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80003ca:	605a      	str	r2, [r3, #4]
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	40020000 	.word	0x40020000
 80003d8:	4002006c 	.word	0x4002006c
 80003dc:	20000080 	.word	0x20000080
 80003e0:	20000048 	.word	0x20000048
 80003e4:	2000007c 	.word	0x2000007c
 80003e8:	20000068 	.word	0x20000068
 80003ec:	20000044 	.word	0x20000044

080003f0 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(){///tx
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
	if(DMA1->ISR & DMA_ISR_TCIF7){//прерывание по окочанию передачи
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <DMA1_Channel7_IRQHandler+0x40>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d008      	beq.n	8000412 <DMA1_Channel7_IRQHandler+0x22>
		global_uart2_flag_data_transmitted = 1;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <DMA1_Channel7_IRQHandler+0x44>)
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
		DMA1_TX2_DISABLE();
 8000406:	4b0c      	ldr	r3, [pc, #48]	; (8000438 <DMA1_Channel7_IRQHandler+0x48>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <DMA1_Channel7_IRQHandler+0x48>)
 800040c:	f023 0301 	bic.w	r3, r3, #1
 8000410:	6013      	str	r3, [r2, #0]
	}
	if(DMA1->ISR & DMA_ISR_TEIF7){//прерывание при ошибке передачи
 8000412:	4b07      	ldr	r3, [pc, #28]	; (8000430 <DMA1_Channel7_IRQHandler+0x40>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800041a:	2b00      	cmp	r3, #0
 800041c:	d000      	beq.n	8000420 <DMA1_Channel7_IRQHandler+0x30>
		asm("nop");
 800041e:	bf00      	nop
	}
	DMA1->IFCR = DMA_IFCR_CGIF7  | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7;
 8000420:	4b03      	ldr	r3, [pc, #12]	; (8000430 <DMA1_Channel7_IRQHandler+0x40>)
 8000422:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8000426:	605a      	str	r2, [r3, #4]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	40020000 	.word	0x40020000
 8000434:	20000081 	.word	0x20000081
 8000438:	40020080 	.word	0x40020080

0800043c <i2c_init>:
#ifndef I2C_C
#define I2C_C
#include "i2c.h"

void i2c_init(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; //Запуск тактирование порта B
 8000440:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <i2c_init+0x94>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <i2c_init+0x94>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN; //Запуск тактирования альтернативных функций
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <i2c_init+0x94>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a1f      	ldr	r2, [pc, #124]	; (80004d0 <i2c_init+0x94>)
 8000452:	f043 0301 	orr.w	r3, r3, #1
 8000456:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN; //Запуск тактирования I2C1
 8000458:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <i2c_init+0x94>)
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	4a1c      	ldr	r2, [pc, #112]	; (80004d0 <i2c_init+0x94>)
 800045e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000462:	61d3      	str	r3, [r2, #28]

	gpio_x_pin_y_config(I2C_SCL_GPIO, I2C_SCL_PIN, GPIO_CR_MODE_OUTPUT_SPEED_50MHZ, GPIO_CR_CNF_ALTERNATE_FUNCTION_OPEN_DRAIN);
 8000464:	2303      	movs	r3, #3
 8000466:	2203      	movs	r2, #3
 8000468:	2106      	movs	r1, #6
 800046a:	481a      	ldr	r0, [pc, #104]	; (80004d4 <i2c_init+0x98>)
 800046c:	f000 fa2f 	bl	80008ce <gpio_x_pin_y_config>
	gpio_x_pin_y_config(I2C_SDA_GPIO, I2C_SDA_PIN, GPIO_CR_MODE_OUTPUT_SPEED_50MHZ, GPIO_CR_CNF_ALTERNATE_FUNCTION_OPEN_DRAIN);
 8000470:	2303      	movs	r3, #3
 8000472:	2203      	movs	r2, #3
 8000474:	2107      	movs	r1, #7
 8000476:	4817      	ldr	r0, [pc, #92]	; (80004d4 <i2c_init+0x98>)
 8000478:	f000 fa29 	bl	80008ce <gpio_x_pin_y_config>

	//i2c_reset();
	I2Cx_ACTIVE->CR2 = CPU_CLOCK_MHZ << I2C_CR2_FREQ_Pos; //freq for i2c
 800047c:	4b16      	ldr	r3, [pc, #88]	; (80004d8 <i2c_init+0x9c>)
 800047e:	2224      	movs	r2, #36	; 0x24
 8000480:	605a      	str	r2, [r3, #4]
#ifdef IS_SLAVE
	I2Cx_ACTIVE->OAR1 = 35	<< I2C_OAR1_ADD0_Pos;//max5980 address, try emulate
#endif
#ifndef IS_SLAVE
	I2Cx_ACTIVE->OAR1 = DEVICE_ADDR_7_BIT	<< I2C_OAR1_ADD0_Pos;//device address1
 8000482:	4b15      	ldr	r3, [pc, #84]	; (80004d8 <i2c_init+0x9c>)
 8000484:	221b      	movs	r2, #27
 8000486:	609a      	str	r2, [r3, #8]
#endif
	I2Cx_ACTIVE->OAR2 = 0;//device address2
 8000488:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <i2c_init+0x9c>)
 800048a:	2200      	movs	r2, #0
 800048c:	60da      	str	r2, [r3, #12]
	//and select timing in Fast mode low lewel to high level __-  equal 2 or 16:9
#ifdef I2C_SM//Standard mode I2C
	BIT_VALUE_RESET(I2Cx_ACTIVE->CCR, I2C_CCR_FS);
#endif
#ifndef I2C_SM//Fast mode I2C
	I2Cx_ACTIVE->CCR |= I2C_CCR_FS;
 800048e:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <i2c_init+0x9c>)
 8000490:	69db      	ldr	r3, [r3, #28]
 8000492:	4a11      	ldr	r2, [pc, #68]	; (80004d8 <i2c_init+0x9c>)
 8000494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000498:	61d3      	str	r3, [r2, #28]
	BIT_VALUE_RESET(I2Cx_ACTIVE->CCR, I2C_CCR_DUTY); //tlow/thigh = 2
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <i2c_init+0x9c>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <i2c_init+0x9c>)
 80004a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004a4:	61d3      	str	r3, [r2, #28]
	#ifdef I2C_FM_DUTY_16_9
	I2Cx_ACTIVE->CCR |= I2C_CCR_DUTY;//tlow/thigh = 16:9
	#endif
#endif
	I2Cx_ACTIVE->CCR |= I2C_CCR << I2C_CCR_CCR_Pos;//f_i2c to real speed ratio
 80004a6:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <i2c_init+0x9c>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <i2c_init+0x9c>)
 80004ac:	f043 031e 	orr.w	r3, r3, #30
 80004b0:	61d3      	str	r3, [r2, #28]

	I2Cx_ACTIVE->TRISE |= I2C_TRISE_TIME << I2C_TRISE_TRISE_Pos;//t rise front signal
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <i2c_init+0x9c>)
 80004b4:	6a1b      	ldr	r3, [r3, #32]
 80004b6:	4a08      	ldr	r2, [pc, #32]	; (80004d8 <i2c_init+0x9c>)
 80004b8:	f043 030c 	orr.w	r3, r3, #12
 80004bc:	6213      	str	r3, [r2, #32]
	I2Cx_ACTIVE->CR1 |= I2C_CR1_PE;//i2c1 enable
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <i2c_init+0x9c>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a05      	ldr	r2, [pc, #20]	; (80004d8 <i2c_init+0x9c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6013      	str	r3, [r2, #0]
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40005400 	.word	0x40005400

080004dc <i2c_send_address>:


//send address for 7bit case
int16_t i2c_send_address(uint8_t address, uint8_t READ_nwrite){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	71bb      	strb	r3, [r7, #6]
	address = I2C_ADDRESS_W_Nr(address,I2C_READ);
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	b25b      	sxtb	r3, r3
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	b25b      	sxtb	r3, r3
 80004f8:	71fb      	strb	r3, [r7, #7]
	BIT_VALUE_RESET(I2Cx_ACTIVE->CR1, I2C_CR1_POS);//(N)ACK for CURRENT byte in the shift register
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <i2c_send_address+0x94>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a1c      	ldr	r2, [pc, #112]	; (8000570 <i2c_send_address+0x94>)
 8000500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000504:	6013      	str	r3, [r2, #0]
	I2C_START();//send START
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <i2c_send_address+0x94>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a19      	ldr	r2, [pc, #100]	; (8000570 <i2c_send_address+0x94>)
 800050c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000510:	6013      	str	r3, [r2, #0]

	while (!(I2Cx_ACTIVE->SR1 & I2C_SR1_SB)) {
 8000512:	bf00      	nop
 8000514:	4b16      	ldr	r3, [pc, #88]	; (8000570 <i2c_send_address+0x94>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d105      	bne.n	800052c <i2c_send_address+0x50>
		delay_ms(50);//if start not happend
 8000520:	2032      	movs	r0, #50	; 0x32
 8000522:	f000 fb2d 	bl	8000b80 <delay_ms>
		return -1;
 8000526:	f04f 33ff 	mov.w	r3, #4294967295
 800052a:	e01d      	b.n	8000568 <i2c_send_address+0x8c>
	}//wait for START happend
	//clear SB & send address
	I2Cx_ACTIVE->SR1;
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <i2c_send_address+0x94>)
 800052e:	695b      	ldr	r3, [r3, #20]
	I2Cx_ACTIVE->DR = (address);
 8000530:	4a0f      	ldr	r2, [pc, #60]	; (8000570 <i2c_send_address+0x94>)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	6113      	str	r3, [r2, #16]
	//
	//if  ACK correct and address send
	while ( (I2Cx_ACTIVE->SR1 & I2C_SR1_AF) && !(I2Cx_ACTIVE->SR1 & I2C_SR1_ADDR)) {
 8000536:	bf00      	nop
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <i2c_send_address+0x94>)
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000540:	2b00      	cmp	r3, #0
 8000542:	d00c      	beq.n	800055e <i2c_send_address+0x82>
 8000544:	e005      	b.n	8000552 <i2c_send_address+0x76>
		delay_ms(50);//if NACK
 8000546:	2032      	movs	r0, #50	; 0x32
 8000548:	f000 fb1a 	bl	8000b80 <delay_ms>
		return -1;
 800054c:	f04f 33ff 	mov.w	r3, #4294967295
 8000550:	e00a      	b.n	8000568 <i2c_send_address+0x8c>
	while ( (I2Cx_ACTIVE->SR1 & I2C_SR1_AF) && !(I2Cx_ACTIVE->SR1 & I2C_SR1_ADDR)) {
 8000552:	4b07      	ldr	r3, [pc, #28]	; (8000570 <i2c_send_address+0x94>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f003 0302 	and.w	r3, r3, #2
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f3      	beq.n	8000546 <i2c_send_address+0x6a>
	}
	I2C_CLEAR_ADDR();
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <i2c_send_address+0x94>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4b03      	ldr	r3, [pc, #12]	; (8000570 <i2c_send_address+0x94>)
 8000564:	699b      	ldr	r3, [r3, #24]
	return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40005400 	.word	0x40005400

08000574 <i2c_send_and_read>:
		return 0;
}


//
int16_t i2c_send_and_read(uint8_t address,uint8_t reg_num){
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	460a      	mov	r2, r1
 800057e:	71fb      	strb	r3, [r7, #7]
 8000580:	4613      	mov	r3, r2
 8000582:	71bb      	strb	r3, [r7, #6]
	int16_t correct = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	81fb      	strh	r3, [r7, #14]
	BIT_VALUE_RESET(I2Cx_ACTIVE->CR1, I2C_CR1_POS); //(N)ACK for CURRENT byte in the shift register
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <i2c_send_and_read+0x70>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <i2c_send_and_read+0x70>)
 800058e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000592:	6013      	str	r3, [r2, #0]
	correct = i2c_send_address(address, I2C_WRITE);
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2100      	movs	r1, #0
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ff9f 	bl	80004dc <i2c_send_address>
 800059e:	4603      	mov	r3, r0
 80005a0:	81fb      	strh	r3, [r7, #14]
	if(correct < 0) return correct;
 80005a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	da02      	bge.n	80005b0 <i2c_send_and_read+0x3c>
 80005aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80005ae:	e014      	b.n	80005da <i2c_send_and_read+0x66>
	//send register number
	while (!(I2Cx_ACTIVE->SR1, I2C_SR1_TXE)) {//while data reg NOT EMPTY
 80005b0:	bf00      	nop
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <i2c_send_and_read+0x70>)
 80005b4:	695b      	ldr	r3, [r3, #20]
			I2C_STOP();//send STOP
			BIT_VALUE_RESET(I2Cx_ACTIVE->SR1, I2C_SR1_AF);//AF = ACK Failure
			return -1;
		}
	}
	I2Cx_ACTIVE->DR = reg_num; //Запись байта
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <i2c_send_and_read+0x70>)
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	6113      	str	r3, [r2, #16]
	//The last one byte with NACK and STOP signal
	I2C_SET_n_ACK(); //NACK
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <i2c_send_and_read+0x70>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a08      	ldr	r2, [pc, #32]	; (80005e4 <i2c_send_and_read+0x70>)
 80005c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005c6:	6013      	str	r3, [r2, #0]
	I2C_STOP();//send STOP
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <i2c_send_and_read+0x70>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <i2c_send_and_read+0x70>)
 80005ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005d2:	6013      	str	r3, [r2, #0]
	return i2c_rx();//wait for BYTE
 80005d4:	f000 f808 	bl	80005e8 <i2c_rx>
 80005d8:	4603      	mov	r3, r0
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40005400 	.word	0x40005400

080005e8 <i2c_rx>:
	}//wait for  empty data reg
	I2Cx_ACTIVE->DR = data;
	return 0;
}

int16_t i2c_rx(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	while(!(I2Cx_ACTIVE->SR1 & I2C_SR1_RXNE)){
 80005ec:	bf00      	nop
 80005ee:	4b08      	ldr	r3, [pc, #32]	; (8000610 <i2c_rx+0x28>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d105      	bne.n	8000606 <i2c_rx+0x1e>
		delay_ms(50);//if no data on line
 80005fa:	2032      	movs	r0, #50	; 0x32
 80005fc:	f000 fac0 	bl	8000b80 <delay_ms>
		return -1;
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	e002      	b.n	800060c <i2c_rx+0x24>
	}//wait for not empty data reg
	return I2Cx_ACTIVE->DR;
 8000606:	4b02      	ldr	r3, [pc, #8]	; (8000610 <i2c_rx+0x28>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	b21b      	sxth	r3, r3
}
 800060c:	4618      	mov	r0, r3
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40005400 	.word	0x40005400

08000614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4906      	ldr	r1, [pc, #24]	; (8000648 <__NVIC_EnableIRQ+0x34>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100

0800064c <main>:
Функции обмена по i2c сделать отдельными файлами *.с/*.h сделано. много. отдельных. файлов.
 */
void interrupts_first_init();
void rcc_init();
/////////////////
int main(void) {
 800064c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8000652:	af02      	add	r7, sp, #8
	uint8_t buff[64];
	uint8_t uart_tx[UART_TX_BUFF_SIZE]="test meow meow meow\n\0";
 8000654:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000658:	f5a3 76a2 	sub.w	r6, r3, #324	; 0x144
 800065c:	4b5a      	ldr	r3, [pc, #360]	; (80007c8 <main+0x17c>)
 800065e:	4634      	mov	r4, r6
 8000660:	461d      	mov	r5, r3
 8000662:	6828      	ldr	r0, [r5, #0]
 8000664:	6869      	ldr	r1, [r5, #4]
 8000666:	68aa      	ldr	r2, [r5, #8]
 8000668:	68eb      	ldr	r3, [r5, #12]
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	6928      	ldr	r0, [r5, #16]
 800066e:	6020      	str	r0, [r4, #0]
 8000670:	8aab      	ldrh	r3, [r5, #20]
 8000672:	80a3      	strh	r3, [r4, #4]
 8000674:	f106 0316 	add.w	r3, r6, #22
 8000678:	22e9      	movs	r2, #233	; 0xe9
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fc96 	bl	8000fae <memset>
	uint8_t uart_rx[UART_RX_BUFF_SIZE];

	uint8_t buff_rx[2] = {0,0};
 8000682:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000686:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800068a:	2200      	movs	r2, #0
 800068c:	801a      	strh	r2, [r3, #0]

	buff[0] = 127;
 800068e:	237f      	movs	r3, #127	; 0x7f
 8000690:	f887 3224 	strb.w	r3, [r7, #548]	; 0x224
	buff[1] = 6;
 8000694:	2306      	movs	r3, #6
 8000696:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225
	const char* det_str = 0;
 800069a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800069e:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
	const char* class_str = 0;
 80006a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80006aa:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
	rcc_init();
 80006b2:	f000 f88d 	bl	80007d0 <rcc_init>
	tim2_init(TIM1_MSEC_PSK/2,2);//timer2 1ms for exit from endless loop
 80006b6:	2102      	movs	r1, #2
 80006b8:	f244 6050 	movw	r0, #18000	; 0x4650
 80006bc:	f000 facc 	bl	8000c58 <tim2_init>
	i2c_init();
 80006c0:	f7ff febc 	bl	800043c <i2c_init>
	interrupts_first_init();
 80006c4:	f000 f8ee 	bl	80008a4 <interrupts_first_init>
	dma_init(2, UART_TX_BUFF_SIZE, uart_tx, UART_RX_BUFF_SIZE, uart_rx);
 80006c8:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80006cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	23ff      	movs	r3, #255	; 0xff
 80006d4:	21ff      	movs	r1, #255	; 0xff
 80006d6:	2002      	movs	r0, #2
 80006d8:	f7ff fd5e 	bl	8000198 <dma_init>
	uart2_init(uart_rx, uart_tx);
 80006dc:	f507 7292 	add.w	r2, r7, #292	; 0x124
 80006e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fafc 	bl	8000ce4 <uart2_init>
	//TIM2_ENABLE();

	while (1) {

		delay_ms(1000);
 80006ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f0:	f000 fa46 	bl	8000b80 <delay_ms>

#ifdef IS_READY
		for(uint8_t port_n = 0; port_n < MAX_PORT_NUMBER; port_n++){
 80006f4:	2300      	movs	r3, #0
 80006f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80006fa:	e060      	b.n	80007be <main+0x172>
			char port_str[] = "DEBUG: PORT(N)\n\n\0";
 80006fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000700:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000704:	4a31      	ldr	r2, [pc, #196]	; (80007cc <main+0x180>)
 8000706:	461c      	mov	r4, r3
 8000708:	4615      	mov	r5, r2
 800070a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070e:	682b      	ldr	r3, [r5, #0]
 8000710:	8023      	strh	r3, [r4, #0]
			port_str[12]=hex2char(port_n);
 8000712:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8000716:	4618      	mov	r0, r3
 8000718:	f000 f9cc 	bl	8000ab4 <hex2char>
 800071c:	4603      	mov	r3, r0
 800071e:	461a      	mov	r2, r3
 8000720:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000724:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 8000728:	731a      	strb	r2, [r3, #12]
			max_port_status_check(port_n, &det_str, &class_str);
 800072a:	f107 0218 	add.w	r2, r7, #24
 800072e:	f107 011c 	add.w	r1, r7, #28
 8000732:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f92a 	bl	8000990 <max_port_status_check>
			uart_transmit_string(2, port_str, str_len(port_str));
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f997 	bl	8000a72 <str_len>
 8000744:	4603      	mov	r3, r0
 8000746:	b2da      	uxtb	r2, r3
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4619      	mov	r1, r3
 800074c:	2002      	movs	r0, #2
 800074e:	f000 fb27 	bl	8000da0 <uart_transmit_string>
			delay_ms(100);
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f000 fa14 	bl	8000b80 <delay_ms>
			uart_transmit_string(2, det_str, str_len(det_str));
 8000758:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800075c:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 8000760:	681c      	ldr	r4, [r3, #0]
 8000762:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000766:	f5a3 7313 	sub.w	r3, r3, #588	; 0x24c
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4618      	mov	r0, r3
 800076e:	f000 f980 	bl	8000a72 <str_len>
 8000772:	4603      	mov	r3, r0
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	4621      	mov	r1, r4
 800077a:	2002      	movs	r0, #2
 800077c:	f000 fb10 	bl	8000da0 <uart_transmit_string>
			delay_ms(100);
 8000780:	2064      	movs	r0, #100	; 0x64
 8000782:	f000 f9fd 	bl	8000b80 <delay_ms>
			uart_transmit_string(2, class_str, str_len(class_str));
 8000786:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800078a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 800078e:	681c      	ldr	r4, [r3, #0]
 8000790:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8000794:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f969 	bl	8000a72 <str_len>
 80007a0:	4603      	mov	r3, r0
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	4621      	mov	r1, r4
 80007a8:	2002      	movs	r0, #2
 80007aa:	f000 faf9 	bl	8000da0 <uart_transmit_string>
			delay_ms(100);
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f000 f9e6 	bl	8000b80 <delay_ms>
		for(uint8_t port_n = 0; port_n < MAX_PORT_NUMBER; port_n++){
 80007b4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80007b8:	3301      	adds	r3, #1
 80007ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80007be:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80007c2:	2b03      	cmp	r3, #3
 80007c4:	d99a      	bls.n	80006fc <main+0xb0>
		delay_ms(1000);
 80007c6:	e791      	b.n	80006ec <main+0xa0>
 80007c8:	08001020 	.word	0x08001020
 80007cc:	08001038 	.word	0x08001038

080007d0 <rcc_init>:
		//max_port_status_check(port_n, detection_str, class_str)
	}

}

void rcc_init(){//36mhz
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
	//RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;// делим частоту на 2 у медленной шины APB1 до 36мгц
	RCC->CFGR |= RCC_CFGR_PLLMULL9;//умножение частоты на 9
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <rcc_init+0xcc>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	4a30      	ldr	r2, [pc, #192]	; (800089c <rcc_init+0xcc>)
 80007da:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80007de:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLXTPRE_HSE_DIV2;//делим входную частоту на 2 от внешнего кварца
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <rcc_init+0xcc>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4a2d      	ldr	r2, [pc, #180]	; (800089c <rcc_init+0xcc>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC;//тактирование множителя частоты от внешнего кварца
 80007ec:	4b2b      	ldr	r3, [pc, #172]	; (800089c <rcc_init+0xcc>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <rcc_init+0xcc>)
 80007f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007f6:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_HSEON;//включаем внешний кварц
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <rcc_init+0xcc>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a27      	ldr	r2, [pc, #156]	; (800089c <rcc_init+0xcc>)
 80007fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000802:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY)){}//пока не готов внешний кварц
 8000804:	bf00      	nop
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <rcc_init+0xcc>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f9      	beq.n	8000806 <rcc_init+0x36>

	RCC->CR |= RCC_CR_PLLON;//включаем множитель частоты
 8000812:	4b22      	ldr	r3, [pc, #136]	; (800089c <rcc_init+0xcc>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <rcc_init+0xcc>)
 8000818:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800081c:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}//пока не готов множитель частоты
 800081e:	bf00      	nop
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <rcc_init+0xcc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000828:	2b00      	cmp	r3, #0
 800082a:	d0f9      	beq.n	8000820 <rcc_init+0x50>

	RCC->CFGR |= RCC_CFGR_SW_PLL;//переключаем SYSCLK на тактирование от PLL
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <rcc_init+0xcc>)
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a1a      	ldr	r2, [pc, #104]	; (800089c <rcc_init+0xcc>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	6053      	str	r3, [r2, #4]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)){}//пока не переключится SYSCLK на PLL
 8000838:	bf00      	nop
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <rcc_init+0xcc>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f9      	beq.n	800083a <rcc_init+0x6a>
	//
	//RTC
	//
	RCC->APB1ENR |= RCC_APB1ENR_PWREN | RCC_APB1ENR_BKPEN;//Power interface clock enable | Backup interface clock enable
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <rcc_init+0xcc>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <rcc_init+0xcc>)
 800084c:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
 8000850:	61d3      	str	r3, [r2, #28]
	PWR->CR |= PWR_CR_DBP;//
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <rcc_init+0xd0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <rcc_init+0xd0>)
 8000858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085c:	6013      	str	r3, [r2, #0]
	RCC->BDCR |=RCC_CLOCK_SOURSE_LSE<<RCC_BDCR_RTCSEL_Pos;//тактирование часов от часового кварца
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <rcc_init+0xcc>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <rcc_init+0xcc>)
 8000864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000868:	6213      	str	r3, [r2, #32]
	RCC->BDCR |= RCC_BDCR_LSEON;//External low-speed oscillator enable
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <rcc_init+0xcc>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	4a0b      	ldr	r2, [pc, #44]	; (800089c <rcc_init+0xcc>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6213      	str	r3, [r2, #32]
	RCC->BDCR |=RCC_BDCR_RTCEN;//включение часов
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <rcc_init+0xcc>)
 8000878:	6a1b      	ldr	r3, [r3, #32]
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <rcc_init+0xcc>)
 800087c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000880:	6213      	str	r3, [r2, #32]

	while(!(RCC->BDCR & RCC_BDCR_LSERDY)){}//пока не стабилизируется часовой кварц
 8000882:	bf00      	nop
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <rcc_init+0xcc>)
 8000886:	6a1b      	ldr	r3, [r3, #32]
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	2b00      	cmp	r3, #0
 800088e:	d0f9      	beq.n	8000884 <rcc_init+0xb4>
	//BIT_NUMBER_RESET(PWR->CR, PWR_CR_DBP);
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000
 80008a0:	40007000 	.word	0x40007000

080008a4 <interrupts_first_init>:

void interrupts_first_init(){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	NVIC_EnableIRQ(USART2_IRQn);
 80008a8:	2026      	movs	r0, #38	; 0x26
 80008aa:	f7ff feb3 	bl	8000614 <__NVIC_EnableIRQ>

	NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80008ae:	2010      	movs	r0, #16
 80008b0:	f7ff feb0 	bl	8000614 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80008b4:	2011      	movs	r0, #17
 80008b6:	f7ff fead 	bl	8000614 <__NVIC_EnableIRQ>

	NVIC_EnableIRQ(TIM2_IRQn);
 80008ba:	201c      	movs	r0, #28
 80008bc:	f7ff feaa 	bl	8000614 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(TIM3_IRQn);
 80008c0:	201d      	movs	r0, #29
 80008c2:	f7ff fea7 	bl	8000614 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80008c6:	b662      	cpsie	i
}
 80008c8:	bf00      	nop
	 __enable_irq (); // Разрешить прерывания IRQ
	 //__disable_irq ();// Запретить прерывания IRQ
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}

080008ce <gpio_x_pin_y_config>:

void gpio_x_pin_y_config(GPIO_TypeDef * GPIOx,uint8_t pin_y, uint8_t mode, uint8_t cnf ){
 80008ce:	b480      	push	{r7}
 80008d0:	b083      	sub	sp, #12
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
 80008d6:	4608      	mov	r0, r1
 80008d8:	4611      	mov	r1, r2
 80008da:	461a      	mov	r2, r3
 80008dc:	4603      	mov	r3, r0
 80008de:	70fb      	strb	r3, [r7, #3]
 80008e0:	460b      	mov	r3, r1
 80008e2:	70bb      	strb	r3, [r7, #2]
 80008e4:	4613      	mov	r3, r2
 80008e6:	707b      	strb	r3, [r7, #1]
	if(pin_y > 7){//другой регистр
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b07      	cmp	r3, #7
 80008ec:	d927      	bls.n	800093e <gpio_x_pin_y_config+0x70>
		pin_y = pin_y-8;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	3b08      	subs	r3, #8
 80008f2:	70fb      	strb	r3, [r7, #3]
		GPIOx->CRH = (GPIOx->CRH & 	( ~((uint32_t)(0x0003<<(pin_y*4))))) | mode<<(pin_y*4);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	2103      	movs	r1, #3
 80008fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	4013      	ands	r3, r2
 8000906:	78b9      	ldrb	r1, [r7, #2]
 8000908:	78fa      	ldrb	r2, [r7, #3]
 800090a:	0092      	lsls	r2, r2, #2
 800090c:	fa01 f202 	lsl.w	r2, r1, r2
 8000910:	431a      	orrs	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	605a      	str	r2, [r3, #4]
		GPIOx->CRH = (GPIOx->CRH & 	( ~((uint32_t)(0x0003<<(2+pin_y*4))))) | cnf<<(2+pin_y*4);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	78fb      	ldrb	r3, [r7, #3]
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	3302      	adds	r3, #2
 8000920:	2103      	movs	r1, #3
 8000922:	fa01 f303 	lsl.w	r3, r1, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	4013      	ands	r3, r2
 800092a:	7879      	ldrb	r1, [r7, #1]
 800092c:	78fa      	ldrb	r2, [r7, #3]
 800092e:	0092      	lsls	r2, r2, #2
 8000930:	3202      	adds	r2, #2
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	605a      	str	r2, [r3, #4]
	}
	else{
		GPIOx->CRL = (GPIOx->CRL & 	( ~((uint32_t)(0x0003<<(pin_y*4))))) | mode<<(pin_y*4);
		GPIOx->CRL = (GPIOx->CRL & 	( ~((uint32_t)(0x0003<<(2+pin_y*4))))) | cnf<<(2+pin_y*4);
	}
}
 800093c:	e023      	b.n	8000986 <gpio_x_pin_y_config+0xb8>
		GPIOx->CRL = (GPIOx->CRL & 	( ~((uint32_t)(0x0003<<(pin_y*4))))) | mode<<(pin_y*4);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	78fb      	ldrb	r3, [r7, #3]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	2103      	movs	r1, #3
 8000948:	fa01 f303 	lsl.w	r3, r1, r3
 800094c:	43db      	mvns	r3, r3
 800094e:	4013      	ands	r3, r2
 8000950:	78b9      	ldrb	r1, [r7, #2]
 8000952:	78fa      	ldrb	r2, [r7, #3]
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
		GPIOx->CRL = (GPIOx->CRL & 	( ~((uint32_t)(0x0003<<(2+pin_y*4))))) | cnf<<(2+pin_y*4);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	2103      	movs	r1, #3
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	4013      	ands	r3, r2
 8000974:	7879      	ldrb	r1, [r7, #1]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	3202      	adds	r2, #2
 800097c:	fa01 f202 	lsl.w	r2, r1, r2
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <max_port_status_check>:
#define MAX_CLASS_OFFSET 0

#define MAX_DETECTION_MASK 7
#define MAX_DETECTION_OFFSET 4

void max_port_status_check(uint8_t port_n,const char** detection_str, const char** class_str){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	73fb      	strb	r3, [r7, #15]
	uint8_t port_status_reg = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	75fb      	strb	r3, [r7, #23]
	uint8_t class = 0, detection = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	75bb      	strb	r3, [r7, #22]
 80009a6:	2300      	movs	r3, #0
 80009a8:	757b      	strb	r3, [r7, #21]
	if(port_n>= MAX_PORT_NUMBER){//if incorrect input data
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d81f      	bhi.n	80009f0 <max_port_status_check+0x60>
		return;
	}
	port_status_reg = i2c_send_and_read(MAX_DEVICE_ADDRESS, MAX_REG_STATUS_0+port_n);
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	330c      	adds	r3, #12
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4619      	mov	r1, r3
 80009b8:	2023      	movs	r0, #35	; 0x23
 80009ba:	f7ff fddb 	bl	8000574 <i2c_send_and_read>
 80009be:	4603      	mov	r3, r0
 80009c0:	75fb      	strb	r3, [r7, #23]
		*class_str  = dev_err;
		*detection_str = dev_err2;
		return;
	}
	//if correct data
	detection =( port_status_reg & (MAX_DETECTION_MASK<<MAX_DETECTION_OFFSET) )>>MAX_DETECTION_OFFSET;
 80009c2:	7dfb      	ldrb	r3, [r7, #23]
 80009c4:	111b      	asrs	r3, r3, #4
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	757b      	strb	r3, [r7, #21]
	class = (port_status_reg & (MAX_CLASS_MASK<<MAX_CLASS_OFFSET) )>>MAX_CLASS_OFFSET;
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	75bb      	strb	r3, [r7, #22]
	*class_str  = port_class[class];
 80009d6:	7dbb      	ldrb	r3, [r7, #22]
 80009d8:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <max_port_status_check+0x68>)
 80009da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
	*detection_str = port_detection[detection];
 80009e2:	7d7b      	ldrb	r3, [r7, #21]
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <max_port_status_check+0x6c>)
 80009e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	e000      	b.n	80009f2 <max_port_status_check+0x62>
		return;
 80009f0:	bf00      	nop
}
 80009f2:	3718      	adds	r7, #24
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000020 	.word	0x20000020
 80009fc:	20000000 	.word	0x20000000

08000a00 <str_compare>:
#ifndef STRING_C
#define STRING_C

#include "string.h"
int16_t str_compare(char * str1,char *str2, uint8_t max_lenght){
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t ui = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	75fb      	strb	r3, [r7, #23]
	uint16_t result = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	82bb      	strh	r3, [r7, #20]
	if(max_lenght == 0)
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d101      	bne.n	8000a20 <str_compare+0x20>
		max_lenght = 255;
 8000a1c:	23ff      	movs	r3, #255	; 0xff
 8000a1e:	71fb      	strb	r3, [r7, #7]
	do{
		result = str1[ui] - str2[ui];
 8000a20:	7dfb      	ldrb	r3, [r7, #23]
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	440b      	add	r3, r1
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	82bb      	strh	r3, [r7, #20]
		ui++;
 8000a38:	7dfb      	ldrb	r3, [r7, #23]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	75fb      	strb	r3, [r7, #23]
	}
	while(!result && str1[ui] != '\0' && str2[ui] != '\0' && ui < max_lenght);
 8000a3e:	8abb      	ldrh	r3, [r7, #20]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10f      	bne.n	8000a64 <str_compare+0x64>
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d009      	beq.n	8000a64 <str_compare+0x64>
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4413      	add	r3, r2
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <str_compare+0x64>
 8000a5c:	7dfa      	ldrb	r2, [r7, #23]
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3dd      	bcc.n	8000a20 <str_compare+0x20>
	return result;
 8000a64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <str_len>:
int16_t str_len(char *str){
 8000a72:	b480      	push	{r7}
 8000a74:	b085      	sub	sp, #20
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	 uint16_t i = 1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	81fb      	strh	r3, [r7, #14]
	 while(str[i] != '\0' && i < 255){
 8000a7e:	e002      	b.n	8000a86 <str_len+0x14>
		 i++;
 8000a80:	89fb      	ldrh	r3, [r7, #14]
 8000a82:	3301      	adds	r3, #1
 8000a84:	81fb      	strh	r3, [r7, #14]
	 while(str[i] != '\0' && i < 255){
 8000a86:	89fb      	ldrh	r3, [r7, #14]
 8000a88:	687a      	ldr	r2, [r7, #4]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <str_len+0x26>
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	2bfe      	cmp	r3, #254	; 0xfe
 8000a96:	d9f3      	bls.n	8000a80 <str_len+0xe>
	 }
	 if( i >= 255) return -1;
 8000a98:	89fb      	ldrh	r3, [r7, #14]
 8000a9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000a9c:	d902      	bls.n	8000aa4 <str_len+0x32>
 8000a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa2:	e001      	b.n	8000aa8 <str_len+0x36>
	 return i;
 8000aa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3714      	adds	r7, #20
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
	...

08000ab4 <hex2char>:
		str[j] = ch;
		j++;
	}
}

char hex2char(uint8_t num){//преобразуем 4 бита в 1 hex символ char
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	char ch = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	73fb      	strb	r3, [r7, #15]
	switch(num){
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d853      	bhi.n	8000b70 <hex2char+0xbc>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <hex2char+0x1c>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000b11 	.word	0x08000b11
 8000ad4:	08000b17 	.word	0x08000b17
 8000ad8:	08000b1d 	.word	0x08000b1d
 8000adc:	08000b23 	.word	0x08000b23
 8000ae0:	08000b29 	.word	0x08000b29
 8000ae4:	08000b2f 	.word	0x08000b2f
 8000ae8:	08000b35 	.word	0x08000b35
 8000aec:	08000b3b 	.word	0x08000b3b
 8000af0:	08000b41 	.word	0x08000b41
 8000af4:	08000b47 	.word	0x08000b47
 8000af8:	08000b4d 	.word	0x08000b4d
 8000afc:	08000b53 	.word	0x08000b53
 8000b00:	08000b59 	.word	0x08000b59
 8000b04:	08000b5f 	.word	0x08000b5f
 8000b08:	08000b65 	.word	0x08000b65
 8000b0c:	08000b6b 	.word	0x08000b6b
		case 0x0: ch = '0';break;
 8000b10:	2330      	movs	r3, #48	; 0x30
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	e02e      	b.n	8000b74 <hex2char+0xc0>
		case 0x1: ch = '1';break;
 8000b16:	2331      	movs	r3, #49	; 0x31
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e02b      	b.n	8000b74 <hex2char+0xc0>
		case 0x2: ch = '2';break;
 8000b1c:	2332      	movs	r3, #50	; 0x32
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	e028      	b.n	8000b74 <hex2char+0xc0>
		case 0x3: ch = '3';break;
 8000b22:	2333      	movs	r3, #51	; 0x33
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e025      	b.n	8000b74 <hex2char+0xc0>
		case 0x4: ch = '4';break;
 8000b28:	2334      	movs	r3, #52	; 0x34
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e022      	b.n	8000b74 <hex2char+0xc0>
		case 0x5: ch = '5';break;
 8000b2e:	2335      	movs	r3, #53	; 0x35
 8000b30:	73fb      	strb	r3, [r7, #15]
 8000b32:	e01f      	b.n	8000b74 <hex2char+0xc0>
		case 0x6: ch = '6';break;
 8000b34:	2336      	movs	r3, #54	; 0x36
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	e01c      	b.n	8000b74 <hex2char+0xc0>
		case 0x7: ch = '7';break;
 8000b3a:	2337      	movs	r3, #55	; 0x37
 8000b3c:	73fb      	strb	r3, [r7, #15]
 8000b3e:	e019      	b.n	8000b74 <hex2char+0xc0>
		case 0x8: ch = '8';break;
 8000b40:	2338      	movs	r3, #56	; 0x38
 8000b42:	73fb      	strb	r3, [r7, #15]
 8000b44:	e016      	b.n	8000b74 <hex2char+0xc0>
		case 0x9: ch = '9';break;
 8000b46:	2339      	movs	r3, #57	; 0x39
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e013      	b.n	8000b74 <hex2char+0xc0>
		case 0xa: ch = 'a';break;
 8000b4c:	2361      	movs	r3, #97	; 0x61
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e010      	b.n	8000b74 <hex2char+0xc0>
		case 0xb: ch = 'b';break;
 8000b52:	2362      	movs	r3, #98	; 0x62
 8000b54:	73fb      	strb	r3, [r7, #15]
 8000b56:	e00d      	b.n	8000b74 <hex2char+0xc0>
		case 0xc: ch = 'c';break;
 8000b58:	2363      	movs	r3, #99	; 0x63
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e00a      	b.n	8000b74 <hex2char+0xc0>
		case 0xd: ch = 'd';break;
 8000b5e:	2364      	movs	r3, #100	; 0x64
 8000b60:	73fb      	strb	r3, [r7, #15]
 8000b62:	e007      	b.n	8000b74 <hex2char+0xc0>
		case 0xe: ch = 'e';break;
 8000b64:	2365      	movs	r3, #101	; 0x65
 8000b66:	73fb      	strb	r3, [r7, #15]
 8000b68:	e004      	b.n	8000b74 <hex2char+0xc0>
		case 0xf: ch = 'f';break;
 8000b6a:	2366      	movs	r3, #102	; 0x66
 8000b6c:	73fb      	strb	r3, [r7, #15]
 8000b6e:	e001      	b.n	8000b74 <hex2char+0xc0>
		default:  ch = 'n';
 8000b70:	236e      	movs	r3, #110	; 0x6e
 8000b72:	73fb      	strb	r3, [r7, #15]
	}
	return ch;
 8000b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <delay_ms>:
uint16_t global_relative_time =0;
uint8_t global_main_flag_tim3_update = 0;
uint8_t global_main_flag_tim2_update = 0;
uint8_t global_main_flag_tim1_update = 0;

void delay_ms(uint16_t ms){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
	global_relative_time = ms;
 8000b8a:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <delay_ms+0x44>)
 8000b8c:	88fb      	ldrh	r3, [r7, #6]
 8000b8e:	8013      	strh	r3, [r2, #0]
	TIM2_ENABLE();
 8000b90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]
	while(global_relative_time){}
 8000ba0:	bf00      	nop
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <delay_ms+0x44>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d1fb      	bne.n	8000ba2 <delay_ms+0x22>
	TIM2_DISABLE();
 8000baa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bb4:	f023 0301 	bic.w	r3, r3, #1
 8000bb8:	6013      	str	r3, [r2, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	20000068 	.word	0x20000068

08000bc8 <TIM3_IRQHandler>:


void TIM3_IRQHandler (void) {
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  TIM3->SR &= ~TIM_SR_UIF;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <TIM3_IRQHandler+0x20>)
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <TIM3_IRQHandler+0x20>)
 8000bd2:	f023 0301 	bic.w	r3, r3, #1
 8000bd6:	6113      	str	r3, [r2, #16]
  global_main_flag_tim3_update=1;
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <TIM3_IRQHandler+0x24>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40000400 	.word	0x40000400
 8000bec:	2000006a 	.word	0x2000006a

08000bf0 <TIM2_IRQHandler>:

void TIM2_IRQHandler (void) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  TIM2->SR &= ~TIM_SR_UIF;
 8000bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6113      	str	r3, [r2, #16]
  global_main_flag_tim2_update=1;
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <TIM2_IRQHandler+0x38>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
  if(global_relative_time) global_relative_time--;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <TIM2_IRQHandler+0x3c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <TIM2_IRQHandler+0x2e>
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <TIM2_IRQHandler+0x3c>)
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <TIM2_IRQHandler+0x3c>)
 8000c1c:	801a      	strh	r2, [r3, #0]
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	2000006b 	.word	0x2000006b
 8000c2c:	20000068 	.word	0x20000068

08000c30 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler (void) {
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  TIM1->SR &= ~TIM_SR_UIF;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <TIM1_UP_IRQHandler+0x20>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a05      	ldr	r2, [pc, #20]	; (8000c50 <TIM1_UP_IRQHandler+0x20>)
 8000c3a:	f023 0301 	bic.w	r3, r3, #1
 8000c3e:	6113      	str	r3, [r2, #16]
  global_main_flag_tim1_update=1;
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <TIM1_UP_IRQHandler+0x24>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]

}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40012c00 	.word	0x40012c00
 8000c54:	2000006c 	.word	0x2000006c

08000c58 <tim2_init>:
	 global_main_flag_tim3_update = 0;
	 //TIM3->DIER |= TIM_DIER_UDE;//включение DMA по событию переполнения
	 //TIM3->CR1 |= TIM_CR1_CEN; /* включение*/
	 //NVIC_EnableIRQ(TIM3_IRQn); /* (9) */
}
void tim2_init(uint16_t tim_psk, uint16_t tim_arr){// Настройка таймера TIM2
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	460a      	mov	r2, r1
 8000c62:	80fb      	strh	r3, [r7, #6]
 8000c64:	4613      	mov	r3, r2
 8000c66:	80bb      	strh	r3, [r7, #4]
RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Включение тактирования TIM2
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <tim2_init+0x58>)
 8000c6a:	69db      	ldr	r3, [r3, #28]
 8000c6c:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <tim2_init+0x58>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	61d3      	str	r3, [r2, #28]
TIM2->PSC = tim_psk - 1; // Предделитель на 72 (частота таймера 1 МГц)
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
TIM2->ARR = tim_arr - 1; // Значение автоперезагрузки (1 мс)
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	1e5a      	subs	r2, r3, #1
 8000c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c86:	62da      	str	r2, [r3, #44]	; 0x2c
TIM2->DIER |= TIM_DIER_UIE; // Разрешение прерывания по переполнению
 8000c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	60d3      	str	r3, [r2, #12]
TIM2->CNT 	= 0;
 8000c98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
//NVIC_EnableIRQ(TIM2_IRQn); // Включение прерывания от TIM2
global_main_flag_tim2_update = 0;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <tim2_init+0x5c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
//TIM2->CR1 |= TIM_CR1_CEN; // Включение таймера
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	2000006b 	.word	0x2000006b

08000cb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cbc:	f3bf 8f4f 	dsb	sy
}
 8000cc0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <__NVIC_SystemReset+0x24>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cca:	4904      	ldr	r1, [pc, #16]	; (8000cdc <__NVIC_SystemReset+0x24>)
 8000ccc:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <__NVIC_SystemReset+0x28>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd2:	f3bf 8f4f 	dsb	sy
}
 8000cd6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <__NVIC_SystemReset+0x20>
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	05fa0004 	.word	0x05fa0004

08000ce4 <uart2_init>:
	//USART1->CR2 |=  USART_CR2_LBDIE;//прерывание по break последовательности
	USART1->CR3 |= USART_CR3_DMAR | USART_CR3_DMAT; //прием и передача через DMA
	return 0;
}

int16_t uart2_init(char * str_rx, char * str_tx){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	if(!(str_rx || str_tx) ) return ERROR_WRONG_ADDRESS;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d105      	bne.n	8000d00 <uart2_init+0x1c>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <uart2_init+0x1c>
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	e040      	b.n	8000d82 <uart2_init+0x9e>
	global_uart2_rx_data = str_rx;
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <uart2_init+0xa8>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
	global_uart2_tx_data = str_tx;
 8000d06:	4a22      	ldr	r2, [pc, #136]	; (8000d90 <uart2_init+0xac>)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	6013      	str	r3, [r2, #0]
	UART2_GPIO_CLOCK_ON();//тактирование портов uart2
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <uart2_init+0xb0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <uart2_init+0xb0>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <uart2_init+0xb0>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	; (8000d94 <uart2_init+0xb0>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
	gpio_x_pin_y_config(UART2_PORT, UART2_TX_PIN, GPIO_CR_MODE_OUTPUT_SPEED_50MHZ, GPIO_CR_CNF_ALTERNATE_FUNCTION_PUSH_PULL);//pa2 tx
 8000d24:	2302      	movs	r3, #2
 8000d26:	2203      	movs	r2, #3
 8000d28:	2102      	movs	r1, #2
 8000d2a:	481b      	ldr	r0, [pc, #108]	; (8000d98 <uart2_init+0xb4>)
 8000d2c:	f7ff fdcf 	bl	80008ce <gpio_x_pin_y_config>
	gpio_x_pin_y_config(UART2_PORT, UART2_RX_PIN, GPIO_CR_MODE_INPUT, GPIO_CR_CNF_INPUT_FLOATING);//pa3 rx
 8000d30:	2301      	movs	r3, #1
 8000d32:	2200      	movs	r2, #0
 8000d34:	2103      	movs	r1, #3
 8000d36:	4818      	ldr	r0, [pc, #96]	; (8000d98 <uart2_init+0xb4>)
 8000d38:	f7ff fdc9 	bl	80008ce <gpio_x_pin_y_config>
	UART2_CLOCK_ON();//тактирование usart2
 8000d3c:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <uart2_init+0xb0>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	4a14      	ldr	r2, [pc, #80]	; (8000d94 <uart2_init+0xb0>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	61d3      	str	r3, [r2, #28]
	USART2->CR1 |= USART_CR1_UE;//включение usart2
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <uart2_init+0xb8>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	4a13      	ldr	r2, [pc, #76]	; (8000d9c <uart2_init+0xb8>)
 8000d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d52:	60d3      	str	r3, [r2, #12]
	//8bit word lenght 1stop bit dma
	USART2->BRR = UART2_CLOCK / UART2_BAUD_RATE;//datasheet can go eat sheet
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <uart2_init+0xb8>)
 8000d56:	f640 62a6 	movw	r2, #3750	; 0xea6
 8000d5a:	609a      	str	r2, [r3, #8]
	USART2->CR1 |=  USART_CR1_RE | USART_CR1_TE;//разрешение приема и передачи
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <uart2_init+0xb8>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <uart2_init+0xb8>)
 8000d62:	f043 030c 	orr.w	r3, r3, #12
 8000d66:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=  USART_CR1_IDLEIE;//прерывание при прекращении пересылки данных по Rx
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <uart2_init+0xb8>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <uart2_init+0xb8>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	60d3      	str	r3, [r2, #12]
	USART2->CR3 |= USART_CR3_DMAR | USART_CR3_DMAT; //прием и передача через DMA
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <uart2_init+0xb8>)
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <uart2_init+0xb8>)
 8000d7a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d7e:	6153      	str	r3, [r2, #20]
	return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000007c 	.word	0x2000007c
 8000d90:	20000078 	.word	0x20000078
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40004400 	.word	0x40004400

08000da0 <uart_transmit_string>:

uint8_t uart_transmit_string(uint8_t uart_num, char *str_tx, uint8_t lenght){//возвращает количество успешно переданных символов
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	71fb      	strb	r3, [r7, #7]
 8000dac:	4613      	mov	r3, r2
 8000dae:	71bb      	strb	r3, [r7, #6]
	if(!str_tx) return ERROR_WRONG_ADDRESS;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <uart_transmit_string+0x1a>
 8000db6:	23ff      	movs	r3, #255	; 0xff
 8000db8:	e036      	b.n	8000e28 <uart_transmit_string+0x88>
	switch (uart_num){
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d002      	beq.n	8000dc6 <uart_transmit_string+0x26>
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d018      	beq.n	8000df6 <uart_transmit_string+0x56>
 8000dc4:	e02f      	b.n	8000e26 <uart_transmit_string+0x86>
	case UART1_NUMBER:
		global_uart_flag_data_transmitted = 0;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <uart_transmit_string+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]
		dma_tx_reinit(uart_num, lenght, str_tx);
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	b299      	uxth	r1, r3
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff f9b9 	bl	800014c <dma_tx_reinit>
		USART1->SR &= (~USART_SR_TC);//сбрасываем бит готовности к передаче
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <uart_transmit_string+0x94>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <uart_transmit_string+0x94>)
 8000de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000de4:	6013      	str	r3, [r2, #0]
		DMA1_TX_ENABLE();//запуск DMA
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <uart_transmit_string+0x98>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <uart_transmit_string+0x98>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]
		return lenght;
 8000df2:	79bb      	ldrb	r3, [r7, #6]
 8000df4:	e018      	b.n	8000e28 <uart_transmit_string+0x88>
		break;
	case UART2_NUMBER:
		global_uart2_flag_data_transmitted = 0;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <uart_transmit_string+0x9c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
		dma_tx_reinit(uart_num, lenght, str_tx);
 8000dfc:	79bb      	ldrb	r3, [r7, #6]
 8000dfe:	b299      	uxth	r1, r3
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff f9a1 	bl	800014c <dma_tx_reinit>
		USART2->SR &= (~USART_SR_TC);//сбрасываем бит готовности к передаче
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <uart_transmit_string+0xa0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <uart_transmit_string+0xa0>)
 8000e10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e14:	6013      	str	r3, [r2, #0]
		DMA1_TX2_ENABLE();//запуск DMA
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <uart_transmit_string+0xa4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <uart_transmit_string+0xa4>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6013      	str	r3, [r2, #0]
		return lenght;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	e000      	b.n	8000e28 <uart_transmit_string+0x88>
		break;
	}
	return ERROR_WRONG_PARAMETRS;
 8000e26:	23fc      	movs	r3, #252	; 0xfc
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000075 	.word	0x20000075
 8000e34:	40013800 	.word	0x40013800
 8000e38:	40020044 	.word	0x40020044
 8000e3c:	20000081 	.word	0x20000081
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40020080 	.word	0x40020080

08000e48 <USART1_IRQHandler>:
	    //GPIOA->BSRR = 1<<(BLUETOOTH_PIN_nENABLE + GPIO_BSRR_BIT_SET);
	    global_uart_flag_data_recieved = 0;
	}
}

void USART1_IRQHandler(){
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
	char str_reset[] = "\\reset";
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <USART1_IRQHandler+0x84>)
 8000e50:	463b      	mov	r3, r7
 8000e52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e56:	6018      	str	r0, [r3, #0]
 8000e58:	3304      	adds	r3, #4
 8000e5a:	8019      	strh	r1, [r3, #0]
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	0c0a      	lsrs	r2, r1, #16
 8000e60:	701a      	strb	r2, [r3, #0]
	uint32_t clear_iddle_flag = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
	int32_t reg_tmp = USART1->SR;//сохраняем статус регистр
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <USART1_IRQHandler+0x88>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60bb      	str	r3, [r7, #8]
	if(reg_tmp &  USART_SR_IDLE){//если на Rx нет движения
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d026      	beq.n	8000ec4 <USART1_IRQHandler+0x7c>
		clear_iddle_flag = USART1->SR;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <USART1_IRQHandler+0x88>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	60fb      	str	r3, [r7, #12]
		clear_iddle_flag = USART1->DR;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <USART1_IRQHandler+0x88>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	60fb      	str	r3, [r7, #12]
		clear_iddle_flag = USART1->SR;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <USART1_IRQHandler+0x88>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60fb      	str	r3, [r7, #12]
		global_uart_flag_data_recieved =  1;
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <USART1_IRQHandler+0x8c>)
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	701a      	strb	r2, [r3, #0]
		//global_uart_rx_iterator = -1;
		global_uart_rx_iterator = UART_RX_BUFF_SIZE - UART1_RX_CHANEL->CNDTR;//буфер минус переданные байты
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <USART1_IRQHandler+0x90>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	b21a      	sxth	r2, r3
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <USART1_IRQHandler+0x94>)
 8000e9e:	801a      	strh	r2, [r3, #0]

		DMA1_RX_DISABLE();
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <USART1_IRQHandler+0x90>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <USART1_IRQHandler+0x90>)
 8000ea6:	f023 0301 	bic.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]
		if(!str_compare(global_uart_rx_data, str_reset, 6)){
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <USART1_IRQHandler+0x98>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4639      	mov	r1, r7
 8000eb2:	2206      	movs	r2, #6
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fda3 	bl	8000a00 <str_compare>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <USART1_IRQHandler+0x7c>
			NVIC_SystemReset();
 8000ec0:	f7ff fefa 	bl	8000cb8 <__NVIC_SystemReset>
		}
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	0800104c 	.word	0x0800104c
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	20000074 	.word	0x20000074
 8000ed8:	40020058 	.word	0x40020058
 8000edc:	20000040 	.word	0x20000040
 8000ee0:	20000070 	.word	0x20000070

08000ee4 <USART2_IRQHandler>:

void USART2_IRQHandler(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
	uint32_t clear_iddle_flag = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
	int32_t	reg_tmp = USART2->SR;//сохраняем статус регистр
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <USART2_IRQHandler+0x6c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	603b      	str	r3, [r7, #0]
	if(reg_tmp &  USART_SR_IDLE){//если на Rx нет движения
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d022      	beq.n	8000f44 <USART2_IRQHandler+0x60>
		clear_iddle_flag = USART2->SR;
 8000efe:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <USART2_IRQHandler+0x6c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	607b      	str	r3, [r7, #4]
		clear_iddle_flag = USART2->DR;
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <USART2_IRQHandler+0x6c>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	607b      	str	r3, [r7, #4]
		clear_iddle_flag = USART2->SR;
 8000f0a:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <USART2_IRQHandler+0x6c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	607b      	str	r3, [r7, #4]
		//clear_iddle_flag = USART2->DR;
		global_uart2_flag_data_recieved =  1;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <USART2_IRQHandler+0x70>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	701a      	strb	r2, [r3, #0]
		//global_uart2_rx_iterator = -1;
		reg_tmp = UART2_RX_CHANEL->CNDTR;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <USART2_IRQHandler+0x74>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	603b      	str	r3, [r7, #0]
		global_uart2_rx_iterator = UART_RX_BUFF_SIZE - UART2_RX_CHANEL->CNDTR;//буфер минус переданные байты
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <USART2_IRQHandler+0x74>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <USART2_IRQHandler+0x78>)
 8000f2c:	801a      	strh	r2, [r3, #0]
		global_uart2_rx_time = global_relative_time;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <USART2_IRQHandler+0x7c>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <USART2_IRQHandler+0x80>)
 8000f36:	601a      	str	r2, [r3, #0]
		DMA1_RX2_DISABLE();
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <USART2_IRQHandler+0x74>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <USART2_IRQHandler+0x74>)
 8000f3e:	f023 0301 	bic.w	r3, r3, #1
 8000f42:	6013      	str	r3, [r2, #0]
	}

}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40004400 	.word	0x40004400
 8000f54:	20000080 	.word	0x20000080
 8000f58:	4002006c 	.word	0x4002006c
 8000f5c:	20000048 	.word	0x20000048
 8000f60:	20000068 	.word	0x20000068
 8000f64:	20000044 	.word	0x20000044

08000f68 <Reset_Handler>:

/* Call the clock system initialization function.*/
    //bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f6a:	490c      	ldr	r1, [pc, #48]	; (8000f9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f6c:	4a0c      	ldr	r2, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f70:	e002      	b.n	8000f78 <LoopCopyDataInit>

08000f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f76:	3304      	adds	r3, #4

08000f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f7c:	d3f9      	bcc.n	8000f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f7e:	4a09      	ldr	r2, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f80:	4c09      	ldr	r4, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f84:	e001      	b.n	8000f8a <LoopFillZerobss>

08000f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f88:	3204      	adds	r2, #4

08000f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f8c:	d3fb      	bcc.n	8000f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f8e:	f000 f817 	bl	8000fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f92:	f7ff fb5b 	bl	800064c <main>
  bx lr
 8000f96:	4770      	bx	lr
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f9c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8000fa0:	080011a8 	.word	0x080011a8
  ldr r2, =_sbss
 8000fa4:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8000fa8:	20000084 	.word	0x20000084

08000fac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC1_2_IRQHandler>

08000fae <memset>:
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4402      	add	r2, r0
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d100      	bne.n	8000fb8 <memset+0xa>
 8000fb6:	4770      	bx	lr
 8000fb8:	f803 1b01 	strb.w	r1, [r3], #1
 8000fbc:	e7f9      	b.n	8000fb2 <memset+0x4>
	...

08000fc0 <__libc_init_array>:
 8000fc0:	b570      	push	{r4, r5, r6, lr}
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	4d0c      	ldr	r5, [pc, #48]	; (8000ff8 <__libc_init_array+0x38>)
 8000fc6:	4c0d      	ldr	r4, [pc, #52]	; (8000ffc <__libc_init_array+0x3c>)
 8000fc8:	1b64      	subs	r4, r4, r5
 8000fca:	10a4      	asrs	r4, r4, #2
 8000fcc:	42a6      	cmp	r6, r4
 8000fce:	d109      	bne.n	8000fe4 <__libc_init_array+0x24>
 8000fd0:	f000 f81a 	bl	8001008 <_init>
 8000fd4:	2600      	movs	r6, #0
 8000fd6:	4d0a      	ldr	r5, [pc, #40]	; (8001000 <__libc_init_array+0x40>)
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <__libc_init_array+0x44>)
 8000fda:	1b64      	subs	r4, r4, r5
 8000fdc:	10a4      	asrs	r4, r4, #2
 8000fde:	42a6      	cmp	r6, r4
 8000fe0:	d105      	bne.n	8000fee <__libc_init_array+0x2e>
 8000fe2:	bd70      	pop	{r4, r5, r6, pc}
 8000fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fe8:	4798      	blx	r3
 8000fea:	3601      	adds	r6, #1
 8000fec:	e7ee      	b.n	8000fcc <__libc_init_array+0xc>
 8000fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff2:	4798      	blx	r3
 8000ff4:	3601      	adds	r6, #1
 8000ff6:	e7f2      	b.n	8000fde <__libc_init_array+0x1e>
 8000ff8:	080011a0 	.word	0x080011a0
 8000ffc:	080011a0 	.word	0x080011a0
 8001000:	080011a0 	.word	0x080011a0
 8001004:	080011a4 	.word	0x080011a4

08001008 <_init>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	bf00      	nop
 800100c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800100e:	bc08      	pop	{r3}
 8001010:	469e      	mov	lr, r3
 8001012:	4770      	bx	lr

08001014 <_fini>:
 8001014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001016:	bf00      	nop
 8001018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800101a:	bc08      	pop	{r3}
 800101c:	469e      	mov	lr, r3
 800101e:	4770      	bx	lr
